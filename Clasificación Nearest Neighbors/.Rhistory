funcion = function(x){
1/sigma * exp(-(x-mu)/sigma)
}
hist(data, breaks = 10)
lines(density(data), type='l')
x = x <- seq(0, 5, 0.3)
grafica = funcion(x)
hist(grafica, breaks = 10)
hist(grafica)
x = x <- seq(0, 5, 0.3)
grafica = funcion(x)
hist(grafica)
data = c(2.4, 5.2, 1.6, 1.7 ,1.6 ,1.2 ,2.1 ,1.0, 4.8, 1.4, 2.0, 1.6, 1.9, 1.0, 3.0, 2.7, 1.8, 2.7,
2.2, 5.1, 1.8, 1.3, 1.0, 3.1, 1.5, 1.6, 1.0, 2.6, 2.2, 3.3, 1.6, 2.7, 1.2, 1.2, 1.9)
mu = sum(data)/35
sigma_1 = 0
for(i in 1:35){
sigma_1 = sigma_1 + (data[i]-mu)
}
funcion = function(x){
1/sigma * exp(-(x-mu)/(-sigma))
}
hist(data, breaks = 10)
lines(density(data), type='l')
x = x <- seq(0, 5, 0.3)
grafica = funcion(x)
hist(grafica)
data = c(2.4, 5.2, 1.6, 1.7 ,1.6 ,1.2 ,2.1 ,1.0, 4.8, 1.4, 2.0, 1.6, 1.9, 1.0, 3.0, 2.7, 1.8, 2.7,
2.2, 5.1, 1.8, 1.3, 1.0, 3.1, 1.5, 1.6, 1.0, 2.6, 2.2, 3.3, 1.6, 2.7, 1.2, 1.2, 1.9)
mu = sum(data)/35
sigma = 0
for(i in 1:35){
sigma = sigma_1 + (data[i]-mu)
}
funcion = function(x){
1/sigma * exp(-(x-mu)/(-sigma))
}
hist(data, breaks = 10)
lines(density(data), type='l')
x = x <- seq(0, 5, 0.2)
grafica = funcion(x)
grafica = funcion(x)
1/sigma * exp(-(x-mu)/(-*sigma))
funcion = function(x){
1/sigma * exp(-(x-mu)/(-*sigma))
hist(data, breaks = 10)
lines(density(data), type='l')
x = x <- seq(0, 5, 0.2)
grafica = funcion(x)
funcion = function(x){
1/sigma * exp(-(x-mu)/sigma)
}
hist(data, breaks = 10)
lines(density(data), type='l')
x = x <- seq(0, 5, 0.2)
grafica = funcion(x)
data = c(2.4, 5.2, 1.6, 1.7 ,1.6 ,1.2 ,2.1 ,1.0, 4.8, 1.4, 2.0, 1.6, 1.9, 1.0, 3.0, 2.7, 1.8, 2.7,
2.2, 5.1, 1.8, 1.3, 1.0, 3.1, 1.5, 1.6, 1.0, 2.6, 2.2, 3.3, 1.6, 2.7, 1.2, 1.2, 1.9)
mu = sum(data)/35
sigma = 0
for(i in 1:35){
sigma = sigma + (data[i]-mu)
}
funcion = function(x){
1/sigma * exp(-(x-mu)/sigma)
}
hist(data, breaks = 10)
lines(density(data), type='l')
x = x <- seq(0, 5, 0.2)
grafica = funcion(x)
1/sigma * exp(-((x-mu)/sigma))
funcion = function(x){
1/sigma * exp(-((x-mu)/sigma))
}
hist(data, breaks = 10)
lines(density(data), type='l')
x = x <- seq(0, 5, 0.2)
grafica = funcion(x)
grafica
mu = sum(data)/35
mu = sum(data)/35
sigma = 0
for(i in 1:35){
sigma = sigma + (data[i]-mu)
print(sigma)
}
for(i in 1:34){
sigma = sigma + (data[i]-mu)
print(sigma)
}
sigma = 0
for(i in 1:34){
sigma = sigma + (data[i]-mu)
print(sigma)
}
for(i in 1:35){
sigma = sigma + (data[i]-mu)
print(sigma)
}
sigma = 0
for(i in 1:35){
sigma = sigma + (data[i]-mu)
print(sigma, data[i])
}
sigma = 0
for(i in 1:35){
sigma = sigma + (data[i]-mu)
print(data[i])
}
print(data[i], (data[i]-mu))
sigma = 0
for(i in 1:35){
sigma = sigma + (data[i]-mu)
print(data[i], (data[i]-mu))
}
print((data[i]-mu))
sigma = 0
for(i in 1:35){
sigma = sigma + (data[i]-mu)
print(data[i])
print((data[i]-mu))
}
sigma = 0
for(i in 1:35){
sigma = sigma + (data[i]-mu)
print(data[i])
print((data[i]-mu))
print(sigma)
}
sigma = 0
funcion = function(x){
1/sigma * exp(-((x-mu)/sigma))
}
hist(data, breaks = 10)
lines(density(data), type='l')
x = x <- seq(0, 5, 0.2)
grafica = funcion(x)
hist(grafica)
sigma = 0.001
funcion = function(x){
1/sigma * exp(-((x-mu)/sigma))
}
hist(data, breaks = 10)
lines(density(data), type='l')
x = x <- seq(0, 5, 0.2)
grafica = funcion(x)
hist(grafica)
hist(grafica, breaks = 10)
sigma = 0.01
funcion = function(x){
1/sigma * exp(-((x-mu)/sigma))
}
hist(data, breaks = 10)
lines(density(data), type='l')
x = x <- seq(0, 5, 0.2)
grafica = funcion(x)
hist(grafica, breaks = 10)
x = x <- seq(2, 5, 0.2)
grafica = funcion(x)
hist(grafica, breaks = 10)
sigma = 1
funcion = function(x){
1/sigma * exp(-((x-mu)/sigma))
}
hist(data, breaks = 10)
lines(density(data), type='l')
x = x <- seq(2, 5, 0.2)
grafica = funcion(x)
hist(grafica, breaks = 10)
funcion = function(x){
1/theta_2 * exp(-(x-theta_1)/theta_2)
}
hist(data, breaks = 10)
lines(density(data), type='l')
x = x <- seq(0, 5, 0.2)
data = c(8.7, 7.2, 6.3, 2.6, 4.3, 2.8, 3.2, 4.0, 4.4, 4.0, 2.9,
3.4, 3.4, 5.1, 2.7, 2.3, 2.1, 3.5, 2.0, 3.7, 5.6, 6.8, 6.2, 4.4, 3.3, 3.3, 2.7,
2.2, 4.3, 17.1)
theta_2 = min(data)
theta_1 = - theta_2 + (sum(data)/30)
funcion = function(x){
1/theta_2 * exp(-(x-theta_1)/theta_2)
}
hist(data, breaks = 10)
lines(density(data), type='l')
x = x <- seq(0, 5, 0.2)
grafica = funcion(x)
hist(grafica, breaks = 10)
hist(data, breaks = 15)
lines(density(data), type='l')
x = x <- seq(0, 5, 0.2)
x = x <- seq(0, 15, 0.2)
grafica = funcion(x)
hist(grafica, breaks = 10)
x = x <- seq(0, 15, 0.2)
grafica = funcion(x)
hist(grafica, breaks = 10)
hist(data, breaks = 15)
lines(density(data), type='l')
x = x <- seq(0, 15, 0.2)
grafica = funcion(x)
hist(grafica, breaks = 10)
lines(density(data))
lines(density(grafica))
hist(data, breaks = 15)
lines(density(data), type='l')
x = x <- seq(0, 15, 0.2)
grafica = funcion(x)
hist(grafica, breaks = 10)
lines(density(grafica))
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
setwd("~/Documents/GitHub/ReportesML_A_Z/Regresión Polinomica")
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
# Ajustar Modelo de Regresión Lineal con el Conjunto de Datos
lin_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$Level{i} = dataset$Level^i
dataset$Level::i = dataset$Level^i
# Ajustar Modelo de Regresión Polinómica con el Conjunto de Datos
for(i in 1:10){
dataset$Level::i = dataset$Level^i
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
# Visualización del modelo lineal
# install.packages("ggplot2")
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suedlo en función del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Visualización del modelo polinómico
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
color = "blue") +
ggtitle("Predicción polinómica del suedlo en función del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Predicción de nuevos resultados con Regresión Lineal
y_pred = predict(lin_reg, newdata = data.frame(Level = 6.5))
# Predicción de nuevos resultados con Regresión Polinómica
y_pred_poly = predict(poly_reg, newdata = data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
# Predicción de nuevos resultados con Regresión Polinómica
y_pred_poly = predict(poly_reg, newdata = data.frame(Level = 10,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
# Predicción de nuevos resultados con Regresión Lineal
y_pred = predict(lin_reg, newdata = data.frame(Level = 10))
# Predicción de nuevos resultados con Regresión Polinómica
y_pred_poly = predict(poly_reg, newdata = data.frame(Level = 10,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
# Predicción de nuevos resultados con Regresión Polinómica
y_pred_poly = predict(poly_reg, newdata = data.frame(Level = 10,
Level2 = 10^2,
Level3 = 10^3,
Level4 = 10^4))
# Predicción de nuevos resultados con Regresión Polinómica
value_x_predict = 10
y_pred_poly = predict(poly_reg, newdata = data.frame(Level = value_x_predict,
Level2 = value_x_predict^2,
Level3 = value_x_predict^3,
Level4 = value_x_predict^4))
# Regresión Polinómica
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
# Ajustar Modelo de Regresión Lineal con el Conjunto de Datos
lin_reg = lm(formula = Salary ~ .,
data = dataset)
# Ajustar Modelo de Regresión Polinómica con el Conjunto de Datos
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
# install.packages("ggplot2")
library(ggplot2)
# Visualización del modelo polinómico
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
color = "blue") +
ggtitle("Predicción polinómica del suedlo en función del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Predicción de nuevos resultados con Regresión Polinómica
value_x_predict = 10
y_pred_poly = predict(poly_reg, newdata = data.frame(Level = value_x_predict,
Level2 = value_x_predict^2,
Level3 = value_x_predict^3,
Level4 = value_x_predict^4))
# Regresión Lineal Simple
# Importar el dataset
dataset = read.csv('Salary_Data.csv')
setwd("~/Documents/GitHub/ReportesML_A_Z/Regresión Lineal Simple")
# Regresión Lineal Simple
# Importar el dataset
dataset = read.csv('Salary_Data.csv')
#dataset = dataset[, 2:3]
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el modelo de regresión lineal simple con el conjunto de entrenamiento
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
# Predecir resultados con el conjunto de test
y_pred = predict(regressor, newdata = testing_set)
# Visualización de los resultados en el conjunto de entrenamiento
#install.packages("ggplot2")
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = "red") +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = "blue") +
ggtitle("Sueldo vs Años de Experiencia (Conjunto de Entrenamiento)") +
xlab("Años de Experiencia") +
ylab("Sueldo (en $)")
# Visualización de los resultados en el conjunto de testing
ggplot() +
geom_point(aes(x = testing_set$YearsExperience, y = testing_set$Salary),
colour = "red") +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = "blue") +
ggtitle("Sueldo vs Años de Experiencia (Conjunto de Testing)") +
xlab("Años de Experiencia") +
ylab("Sueldo (en $)")
# Regresión Lineal Múltiple
# Importar el dataset
dataset = read.csv('50_Startups.csv')
setwd("~/Documents/GitHub/ReportesML_A_Z/Regresión Lineal Multiple")
# Regresión Lineal Múltiple
# Importar el dataset
dataset = read.csv('50_Startups.csv')
#dataset = dataset[, 2:3]
# Codificar las variables categóricas
dataset$State = factor(dataset$State,
levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el modelo de Regresión Lineal Múltiple con el Conjunto de Entrenamiento
regression = lm(formula = Profit ~ .,
data = training_set)
# Predecir los resultados con el conjunto de testing
y_pred = predict(regression, newdata = testing_set)
# Construir un modelo óptimo con la Eliminación hacia atrás
#
SL = 0.05
regression = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regression)
regression = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regression)
regression = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regression)
regression = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regression)
# K - Nearest Neighbors (K-NN)
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
setwd("~/Documents/GitHub/ReportesML_A_Z/Clasificación Nearest Neighbors")
# K - Nearest Neighbors (K-NN)
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el clasificador con el conjunto de entrenamiento
# y hacer las predicciones con el conjunto de testing.
library(class)
y_pred = knn(train = training_set[,-3],
test = testing_set[,-3],
cl = training_set[,3],
k = 5)
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
# Visualización del conjunto de entrenamiento
#install.packages("ElemStatLearn")
library(ElemStatLearn)
# Visualización del conjunto de entrenamiento
install.packages("ElemStatLearn")
install.packages("~/Downloads/ElemStatLearn_0.1-2.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/ElemStatLearn_2015.6.26.2.tar.gz", repos = NULL, type = "source")
# K - Nearest Neighbors (K-NN)
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el clasificador con el conjunto de entrenamiento
# y hacer las predicciones con el conjunto de testing.
library(class)
y_pred = knn(train = training_set[,-3],
test = testing_set[,-3],
cl = training_set[,3],
k = 5)
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
# Visualización del conjunto de entrenamiento
#install.packages("ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[,-3],
test = grid_set,
cl = training_set[,3],
k = 5)
plot(set[, -3],
main = 'K-NN (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualización del conjunto de testing
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[,-3],
test = grid_set,
cl = training_set[,3],
k = 5)
plot(set[, -3],
main = 'K-NN (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
x = NULL
x[1] = 0
x = NULL
x[1] = 0
for(i in 2:1000){
x[i] = x[i-1] + rnorm();
}
caminata_aleatoria = ts(x)
for(i in 2:1000){
x[i] = x[i-1] + rnorm();
}
for(i in 2:1000){
x[i] = x[i-1] + rnorm(1);
}
caminata_aleatoria = ts(x)
plor(caminata_aleatoria)
plot(caminata_aleatoria)
acf(caminata_aleatoria)
plot(diff(caminata_aleatoria))
